#!/usr/bin/env bash

# navtool (nav)
#   - Usage:
#       - Create alias: alias nav=". ${HOME}/.navtool/navtool"
#           - This alias will cause 'nav' to run navtool in the current shell allowing navtool to
#             alter the environment of the current shell (vars, and cwd)
#       - navtool parses the command line flags, and utilizes the navtool-util to process complex tasks
#           - Any environment altering, like updating the ENV Variables or changing directories happens in
#             the navtool
#           - Any processing happens in the navtool-util

UTIL="${NAVTOOL_ROOT}/navtool-util"

if ! test "$#" ; then
    eval "$UTIL --Help"
fi

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -h | --help)    # Short Help
            eval "$UTIL --help"
            ;;
        -H | --Help)    # Long Help
            eval "$UTIL --Help"
            ;;
        --showConfig) # Show the configuration
            eval "${UTIL} --showConfig"
            ;;
        -l | --listKeys) # List the keys being used
            eval "${UTIL} --listKeys"
            ;;
        -L | --listSets) # List the sets that are available
            if [[ "$2" =~ ^[^-][a-zA-Z0-9-]+ ]]; then
                # Passing the set name is optional
                argument="${2}"
            fi
                if [[ -z "$argument" ]]; then
                    eval "${UTIL} --listSets without-keys"
                else
                    eval "${UTIL} --listSets ${argument}"
                    shift
                fi
            ;;
        -i | --include) # Add a new set to the path
            if [[ "$2" =~ ^[^-][a-zA-Z0-9-]+ ]]; then
                # Passing the set name is optional
                setName="${2}"
                shift
            else
                echo "ERROR: --include requires a set name to be passed"
                return
            fi

            if [[ "$2" == "--back" ]]; then
                position="back"
                shift
            else
                position="front"
            fi

            eval "${UTIL} --canAddSet ${setName}::${position}"
            valid="$?"  # return code 0 = valid
            if [[ $valid == "0" ]]; then
                if [[ "${position}" == "front" ]]; then
                    NAVTOOL_PATH="${setName}:${NAVTOOL_PATH}"
                else
                    NAVTOOL_PATH="${NAVTOOL_PATH}:${setName}"
                fi
            fi # Error cases will be printed by the navtool-util
            
            ;;
        --usingSets) # Show the sets that are being used in the path
            eval "${UTIL} --usingSets"
            ;;
        -s | --set) # Add a new set
            setName="${2}"
            eval "$UTIL --newSet ${setName}"
            shift
            ;;
        -k | --key) # Add a new key
            passedSetName=0
            keyName="${2}"
            setName="STAGE_SET"
            if [[ "$3" =~ ^[^-][a-zA-Z0-9]+ ]]; then
                # Passing the set name is optional
                setName="${3}"
                passedSetName=1
            fi
            eval "${UTIL} --makeKey ${setName}::${keyName}::$(realpath .)"

            shift
            if [[ ${passedSetName} -eq 1 ]]; then
                shift
            fi
            ;;
        -r | --rmKey) # Remove a key
            passedSetName=0
            keyName="${2}"
            setName="%FIRST_OCCURANCE%"
            if [[ "$3" =~ ^[^-][a-zA-Z0-9]+ ]]; then
                # Passing the set name is optional
                setName="${3}"
                passedSetName=1
            fi
            eval "${UTIL} --rmKey ${setName}::${keyName}"

            shift
            if [[ ${passedSetName} -eq 1 ]]; then
                shift
            fi
            ;;
        -R | --rmSet) # Remove a set
            setName="${2}"
            eval "${UTIL} --rmSet ${setName}"
            shift
            ;;
        *)  # default
            # Check if we passed a key (doest start with '-')
            if [[ "$1" =~ ^[^-][a-zA-Z0-9\./\\]+ ]]; then
                destination=$(eval "$UTIL --getKeyTarget $1")
                if [[ ! -z "$destination" ]]; then
                    cd_cmd="cd ${destination}"
                    echo "$cd_cmd"
                    eval "$cd_cmd"
                else
                    echo "ERROR: Key [${1}] does not have any targets"
                    return
                fi
            else
                echo "ERROR: Flag not recognized: $1"
                return
            fi
    esac
    shift
done
